#########################################################################################################
# Problem Set 4
# Course: Econometrics 2
# Question 2
# Goal: we investigate whether there is any cointegrating relation between our three variables
#########################################################################################################
# Organize the working enviroment
#########################################################################################################
# Cleaning the working environment
#########################################################################################################

rm(list = ls())

#########################################################################################################
## Load the required packages
#########################################################################################################

if (!require(stringr)) {
  install.packages("stringr")
  library(stringr)
}

if (!require(lubridate)) {
  install.packages("lubridate")
  library(lubridate)
}

if (!require(ggplot2)) {
  install.packages("ggplot2")
  library(ggplot2)
}

if (!require(stargazer)) {
  install.packages("stargazer")
  library(stargazer)
}

if (!require(dplyr)) {
  install.packages("dplyr")
  library(dplyr)
}

if (!require(quantmod)) {
  install.packages("quantmod")
  library(quantmod)
}

if (!require(lmtest)) {
  install.packages("lmtest")
  library(lmtest)
}

if (!require(xtable)) {
  install.packages("xtable")
  library(xtable)
}

if (!require(forecast)) {
  install.packages("forecast")
  library(forecast)
}

if (!require(ARDL)) {
  install.packages("ARDL")
  library(ARDL)
}

if (!require(dynlm)) {
  install.packages("dynlm")
  library(dynlm)
}

if (!require(sandwich)) {
  install.packages("sandwich")
  library(sandwich)
}

if (!require(vars)) {
  install.packages("vars")
  library(vars)
}

if (!require(data.table)) {
  install.packages("data.table")
  library(data.table)
}

if (!require(data.table)) {
  install.packages("data.table")
  library(data.table)
}

#########################################################################################################
## Clean the data
#########################################################################################################

data_br <- fread("data/brazil_data.csv")
data_usa <- fread("data/usa_data.csv")

#########################################################################################################
## Changing variable names:
#########################################################################################################

colnames(data_br) <- c("date", "exchange_rate", "ipca", "x")
colnames(data_usa) <- c("date", "cpi_index")

#########################################################################################################
## Subset of data - 1995 to 2019 
#########################################################################################################

data_br <- data_br[, -4]

data_br <- data_br %>%
  mutate(date = gsub("\\.", "-", date))

data_br$date <- gsub("\\b1\\b", "10", data_br$date)

data_br <- data_br %>%
  mutate(date = paste(date, "01", sep = "-")) %>%       
  mutate(date = ymd(date))                              

data_usa <- data_usa %>%
  mutate(date = ymd(date))

data_br <- subset(data_br, date >= ymd("1995-01-01") & date <= ymd("2019-12-01"))
data_usa <- subset(data_usa, date >= ymd("1995-01-01") & date <= ymd("2019-12-01"))

data <- merge(data_br, data_usa, by = "date")

#########################################################################################################
## Transforming the variables 
#########################################################################################################

data <- data %>%
  mutate(ln_ipca = 100 * (log(ipca) - log(ipca[date == ymd("1995-01-01")])),
         ln_exchange_rate = 100 * (log(exchange_rate) - log(exchange_rate[date == ymd("1995-01-01")])),
         ln_cpi_index = 100 * (log(cpi_index) - log(cpi_index[date == ymd("1995-01-01")])))

#########################################################################################################
## OLS Equation - IPCA ~ Exchange Rate + CPI
#########################################################################################################

# Estimating 
model_1 <- lm(formula = ln_ipca ~ ln_exchange_rate + ln_cpi_index, data = data)

summary(model_1)

# Cointegration Vector 
coint_vec_model_1 <- c(1, -model_1$coefficients[2], -model_1$coefficients[3])

# Residuals Vector
residuals_vector_model_1 <- residuals(model_1)

pdf("figures_question_2/residuals_plot_model1.pdf")  
plot(residuals_vector_model_1, ylab = "Residuals", main = "Residuals Plot - Model 1")
dev.off()


# ADF test on Residuals Vector

adf_model_1 <- ur.df(
  y = residuals_vector_model_1,
  type = "none",
  selectlags = "BIC"
)

#########################################################################################################
# The test statistic is tau1 in the slides. Its critical values are reported at the bottom.
#########################################################################################################
print(summary(adf_model_1))

#########################################################################################################
# Creating an array that receives the results
#########################################################################################################

summary_adf <- summary(adf_model_1)
adf_matrix <- matrix(NA, nrow = 1, ncol = 4)
colnames(adf_matrix) <- c("Statistic","Critical Value (1%)", "Critical Value (5%)", "Critical Value (10%)")
row.names(adf_matrix) <- c("tau1")

adf_matrix[1,1] <- adf_model_1@teststat[1,1]
adf_matrix[1,2] <- summary_adf@cval[1,1]
adf_matrix[1,3] <- summary_adf@cval[1,2]
adf_matrix[1,4] <- summary_adf@cval[1,3]

print(adf_matrix)

#########################################################################################################
## It allows you to create well-formatted
## tables from R data frames or matrices, and export
## them directly in LaTeX code to be included in a LaTeX document.
#########################################################################################################

table_latex <- xtable(
  adf_matrix,
  caption = "ADF Test no drift and no time trend",
  label = "ADF Test",
  align = rep("c", ncol(adf_matrix) + 1),
  digits = 3
)

print(table_latex, file = "figures_question_2/table_adf_test.txt")

#########################################################################################################
## OLS Equation - Exchange Rate ~ IPCA + CPI
#########################################################################################################

# Estimating 
model_2 <- lm(formula = ln_exchange_rate ~ ln_ipca + ln_cpi_index, data = data)

summary(model_2)

# Cointegration Vector 
coint_vec_model_2 <- c(1, -model_2$coefficients[2], -model_2$coefficients[3])

# Residuals Vector
residuals_vector_model_2 <- residuals(model_2)

pdf("figures_question_2/residuals_plot_model2.pdf")  
plot(residuals_vector_model_2, ylab = "Residuals", main = "Residuals Plot - Model 2")
dev.off()

# ADF test on Residuals Vector

adf_model_2 <- ur.df(
  y = residuals_vector_model_2,
  type = "none",
  selectlags = "BIC"
)

#########################################################################################################
# The test statistic is tau1 in the slides. Its critical values are reported at the bottom.
#########################################################################################################
print(summary(adf_model_2))

#########################################################################################################
# Creating an array that receives the results
#########################################################################################################

summary_adf_2 <- summary(adf_model_2)
adf_matrix_2 <- matrix(NA, nrow = 1, ncol = 4)
colnames(adf_matrix_2) <- c("Statistic","Critical Value (1%)", "Critical Value (5%)", "Critical Value (10%)")
row.names(adf_matrix_2) <- c("tau1")

adf_matrix_2[1,1] <- adf_model_2@teststat[1,1]
adf_matrix_2[1,2] <- summary_adf_2@cval[1,1]
adf_matrix_2[1,3] <- summary_adf_2@cval[1,2]
adf_matrix_2[1,4] <- summary_adf_2@cval[1,3]

print(adf_matrix_2)

#########################################################################################################
## It allows you to create well-formatted
## tables from R data frames or matrices, and export
## them directly in LaTeX code to be included in a LaTeX document.
#########################################################################################################

table_latex_2 <- xtable(
  adf_matrix_2,
  caption = "ADF Test no drift and no time trend",
  label = "ADF Test",
  align = rep("c", ncol(adf_matrix_2) + 1),
  digits = 3
)

print(table_latex_2, file = "figures_question_2/table_adf_test2.txt")

#########################################################################################################
## OLS Equation - CPI ~ IPCA + Exchange Rate
#########################################################################################################

# Estimating 
model_3 <- lm(formula = ln_cpi_index ~ ln_ipca + ln_exchange_rate, data = data)

summary(model_3)

# Cointegration Vector 
coint_vec_model_3 <- c(1, -model_3$coefficients[2], -model_3$coefficients[3])
print(coint_vec_model_3)

# Residuals Vector
residuals_vector_model_3 <- residuals(model_3)

pdf("figures_question_2/residuals_plot_model3.pdf")  
plot(residuals_vector_model_3, ylab = "Residuals", main = "Residuals Plot - Model 3")
dev.off()

# ADF test on Residuals Vector

adf_model_3 <- ur.df(
  y = residuals_vector_model_3,
  type = "none",
  selectlags = "BIC"
)

#########################################################################################################
# The test statistic is tau1 in the slides. Its critical values are reported at the bottom.
#########################################################################################################
print(summary(adf_model_3))

#########################################################################################################
# Creating an array that receives the results
#########################################################################################################

summary_adf_3 <- summary(adf_model_3)
adf_matrix_3 <- matrix(NA, nrow = 1, ncol = 4)
colnames(adf_matrix_3) <- c("Statistic","Critical Value (1%)", "Critical Value (5%)", "Critical Value (10%)")
row.names(adf_matrix_3) <- c("tau1")

adf_matrix_3[1,1] <- adf_model_3@teststat[1,1]
adf_matrix_3[1,2] <- summary_adf_3@cval[1,1]
adf_matrix_3[1,3] <- summary_adf_3@cval[1,2]
adf_matrix_3[1,4] <- summary_adf_3@cval[1,3]

print(adf_matrix_3)

#########################################################################################################
## It allows you to create well-formatted
## tables from R data frames or matrices, and export
## them directly in LaTeX code to be included in a LaTeX document.
#########################################################################################################

table_latex_3 <- xtable(
  adf_matrix_3,
  caption = "ADF Test no drift and no time trend",
  label = "ADF Test",
  align = rep("c", ncol(adf_matrix_2) + 1),
  digits = 3
)

print(table_latex_3, file = "figures_question_2/table_adf_test3.txt")
